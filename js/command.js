let commandData = [
	['パワーオンスタート', 111, 1, 'プログラムの先頭に置くと電源オンとともにプログラムが始まる。'],
	['前進', 2, 2, '引数（0〜255）× 0.1秒だけ両輪を前転（前進）させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['後退', 8, 2, '引数（0〜255）× 0.1秒だけ両輪を後転（後退）させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['右回り', 10, 2, '引数（0〜255）× 0.1秒だけ左車輪を前転・右車輪を後転。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['左回り', 11, 2, '引数（0〜255）× 0.1秒だけ右車輪を前転・左車輪を後転。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['停止', 0, 2, '引数（0〜255）× 0.1秒だけ停止させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['左前', 1, 2, '引数（0〜255）× 0.1秒だけ左車輪を前転させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['左後', 7, 2, '引数（0〜255）× 0.1秒だけ左車輪を後転させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['右前', 3, 2, '引数（0〜255）× 0.1秒だけ右車輪を前転させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['右後', 9, 2, '引数（0〜255）× 0.1秒だけ右車輪を後転させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['モーター左', 4, 2, 'モーターを引数（0〜255）× 0.1秒だけ左回転させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['モーター右', 6, 2, 'モーターを引数（0〜255）× 0.1秒だけ右回転させる。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['時間', 5, 2, '引数（0〜255）× 0.1秒だけ前の状態を続ける。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['ブザー', 80, 2, '引数（0〜255）× 0.1秒だけブザーを鳴らす。', '時間', '時間（0〜255 × 0.1秒）', 0, 255],
	['電子音', 105, 3, '第1引数（1〜255）× 0.1秒だけ第2引数のパルス幅（1〜255） の音を鳴らす。パルス幅が大きいほど音は低くなる。', '時間', '時間（1〜255 × 0.1秒）', 1, 255, 'パルス幅', 'パルス幅（1〜255）', 1, 255],
	['リミットスイッチ', 112, 1, 'リミットスイッチが押されるまで以前の状態を続ける。'],
	['ブロックはじめ', 81, 2, '引数のブロック番号（1〜127）を宣言し「ブロックおわり」までの間にプログラムを書く。', 'ブロック番号', 'ブロック番号（1〜127）', 1, 127],
	['ブロックおわり', 113, 1, 'ブロックの終わりを宣言する。'],
	['ブロック実行', 82, 2, '引数のブロック番号（1〜127）を呼び出す。', 'ブロック番号', 'ブロック番号（1〜127）', 1, 127],
	['ブロック繰り返し', 106, 3, '第1引数のブロック番号を第2引数の回数（0〜255）を繰り返す。回数が0の場合は無限に繰り返す。', 'ブロック番号', 'ブロック番号（1〜127）', 1, 127, '回数', '回数（0〜255）', 0, 255],
	['ブロック脱出', 114, 1, 'ブロック内から強制的に抜け出す。'],
	['アンカー', 83, 2, '引数のアンカー番号（1〜127）を宣言。', 'アンカー番号', 'アンカー番号（1〜127）', 1, 127],
	['ジャンプ', 84, 2, '引数のアンカー番号（1〜127）にジャンプ。', 'アンカー番号', 'アンカー番号（1〜127）', 1, 127],
	['入力なしジャンプ', 109, 3, '第1引数のアンカー番号（1〜127）に第2引数の入力ポート（1〜4）が離れていたらにジャンプする。', 'アンカー番号', 'アンカー番号（1〜127）', 1, 127, '入力ポート', '入力ポート（1〜4）', 1, 4],
	['入力ありジャンプ', 108, 3, '第1引数のアンカー番号（1〜127）に第2引数の入力ポート（1〜4）が接続されていたらにジャンプする。', 'アンカー番号', 'アンカー番号（1〜127）', 1, 127, '入力ポート', '入力ポート（1〜4）', 1, 4],
	['サーボ', 107, 3, '第1引数のパルス幅（30〜255）を第2引数のサーボ（1〜6）にセット。', 'パルス幅', 'パルス幅（30〜255）', 30, 255, 'サーボ', 'サーボ（1〜6）', 1, 6],
	['ポート出力', 110, 3, '第1引数（0〜255）× 0.1秒秒だけ第2引数のデータ（0〜255）をポートに出力する。', '時間', '時間（0〜255 × 0.1秒）', 0, 255, 'データ', 'データ（0〜255）', 0, 255],
	['CMD', 85, 2, '引数の命令Codeを実行。ARG1レジスタが第1引数。ARG2レジスタが第2引数。', '命令Code', '命令Code（0〜255）', 0, 255],
	['A', 86, 2, 'Aレジスタに引数（0〜255）をセット。', '引数（0〜255）', 0, 255],
	['IX', 87, 2, 'IXレジスタに引数（0〜255）をセット。', '引数（0〜255）', 0, 255],
	['IXM', 88, 2, 'IXの値（0〜11）によって格納されるインデックスメモリに引数（0〜255）をセット。', '引数', '引数（0〜255）', 0, 255],
	['T1L', 89, 2, 'タイマー1の下位8ビット（0〜255）に引数（0〜255）をセット。', '引数', '引数（0〜255）', 0, 255],
	['T1H', 90, 2, 'タイマー1の上位8ビット（0〜255）に引数（0〜255）をセット。', '引数', '引数（0〜255）', 0, 255],
	['ARG1', 91, 2, 'CMD命令で実行される第1引数に引数（0〜255）をセット。', '引数', '引数（0〜255）', 0, 255],
	['ARG2', 92, 2, 'CMD命令で実行される第2引数に引数（0〜255）をセット。', '引数', '引数（0〜255）', 0, 255],
	['PA', 93, 2, 'ポートAに引数（0〜255）を出力。', '引数', '引数（0〜255）', 0, 255],
	['PC', 94, 2, 'ポートCに引数（0〜255）を出力。', '引数', '引数（0〜255）', 0, 255],
	['ADD', 95, 2, 'Aレジスタ = Aレジスタ + 引数（0〜255）', '引数', '引数（0〜255）', 0, 255],
	['SUB', 96, 2, 'Aレジスタ = Aレジスタ - 引数（0〜255）', '引数', '引数（0〜255）', 0, 255],
	['CMP', 97, 2, 'Aレジスタと引数（0〜255）と比較しZ（ゼロ）フラグとC（キャリー）フラグ を変化させる。', '引数', '引数（0〜255）', 0, 255],
	['AND', 98, 2, 'Aレジスタ = Aレジスタ AND 引数（0〜255）', '引数', '引数（0〜255）', 0, 255],
	['OR', 99, 2, 'Aレジスタ = Aレジスタ OR 引数（0〜255）', '引数', '引数（0〜255）', 0, 255],
	['XOR', 100, 2, 'Aレジスタ = Aレジスタ XOR 引数（0〜255）', '引数', '引数（0〜255）', 0, 255],
	['JZ', 101, 2, 'Z（ゼロ）フラグが真（セット）ならアンカー番号（1〜128）のアンカー番号にジャンプ。', 'アンカー番号', 'アンカー番号（1〜128）', 1, 128],
	['JNZ', 102, 2, 'Z（ゼロ）フラグが偽（クリア）ならアンカー番号（1〜128）のアンカー番号にジャンプ。', 'アンカー番号', 'アンカー番号（1〜128）', 1, 128],
	['JC', 103, 2, 'C（キャリー）フラグが真（セット）ならアンカー番号（1〜128）のアンカー番号にジャンプ。', 'アンカー番号', 'アンカー番号（1〜128）', 1, 128],
	['JNC', 104, 2, 'C（キャリー）フラグが偽（クリア）ならアンカー番号（1〜128）のにジャンプ。', 'アンカー番号', 'アンカー番号（1〜128）', 1, 128],
	['AIX', 115, 1, 'Aレジスタの値をIXレジスタにセット。'],
	['AIXM', 116, 1, 'Aレジスタの値をIXMにセット。'],
	['AT1L', 117, 1, 'Aレジスタの値をタイマー1の下位8ビットにセット。'],
	['AT1H', 118, 1, 'Aレジスタの値をタイマー1の上位8ビットにセット。'],
	['AARG1', 119, 1, 'Aレジスタの値をARG1にセット。'],
	['AARG2', 120, 1, 'Aレジスタの値をARG2にセット。'],
	['APA', 121, 1, 'Aレジスタの値をポートAに出力。'],
	['APC', 122, 1, 'Aレジスタの値をポートCに出力。'],
	['IXA', 123, 1, 'IXレジスタの値をAレジスタにセット。'],
	['IXMA', 124, 1, 'IXMの値をAレジスタにセット。'],
	['T1LA', 125, 1, 'タイマー1の下位8ビットの値をAレジスタにセット。'],
	['T1HA', 126, 1, 'タイマー1の上位8ビットの値をAレジスタにセット。'],
	['ARG1A', 127, 1, 'ARG1の値をAレジスタにセット。'],
	['ARG2A', 128, 1, 'ARG2の値をAレジスタにセット。'],
	['PAA', 129, 1, 'ポートAの値をAレジスタにセット。'],
	['PCA', 130, 1, 'ポートCの値をAレジスタにセット。'],
	['CLA', 131, 1, 'Aレジスタをゼロにする。'],
	['CLIX', 132, 1, 'IXレジスタをゼロにする。'],
	['CLIXM', 133, 1, 'IXMをゼロにする。'],
	['CLT1L', 134, 1, 'タイマー1の下位8ビットをゼロにする。'],
	['CLT1H', 135, 1, 'タイマー1の上位8ビットをゼロにする。'],
	['CLARG1', 136, 1, 'ARG1をゼロにする。'],
	['CLARG2', 137, 1, 'ARG2をゼロにする。'],
	['CLPA', 138, 1, 'ポートAにゼロを出力する。'],
	['CLPC', 139, 1, 'ポートCにゼロを出力する。'],
	['INCA', 140, 1, 'Aレジスタ = Aレジスタ + 1'],
	['INCIX', 141, 1, 'IXレジスタ = IXレジスタ + 1'],
	['INCIXM', 142, 1, 'IXM = IXM + 1'],
	['INCARG1', 143, 1, 'ARG1 = ARG1 + 1'],
	['INCARG2', 144, 1, 'ARG2 = ARG2 + 1'],
	['DECA', 145, 1, 'Aレジスタ = Aレジスタ - 1'],
	['DECIX', 146, 1, 'IXレジスタ = IXレジスタ - 1'],
	['DECIXM', 147, 1, 'IXM = IXM - 1'],
	['DECARG1', 148, 1, 'ARG1 = ARG1 - 1'],
	['DECARG2', 149, 1, 'ARG2 = ARG2 - 1'],
	['ADDIX', 150, 1, 'Aレジスタ = Aレジスタ + IXレジスタ'],
	['ADDIXM', 151, 1, 'Aレジスタ = Aレジスタ + IXM'],
	['ADDT1L', 152, 1, 'Aレジスタ = Aレジスタ + タイマー1の下位8ビット'],
	['ADDT1H', 153, 1, 'Aレジスタ = Aレジスタ + タイマー1の上位8ビット'],
	['ADDARG1', 154, 1, 'Aレジスタ = Aレジスタ + ARG1'],
	['ADDARG2', 155, 1, 'Aレジスタ = Aレジスタ + ARG2'],
	['SUBIX', 156, 1, 'Aレジスタ = Aレジスタ - IXレジスタ'],
	['SUBIXM', 157, 1, 'Aレジスタ = Aレジスタ - IXM'],
	['SUBT1L', 158, 1, 'Aレジスタ = Aレジスタ - タイマー1の下位8ビット'],
	['SUBT1H', 159, 1, 'Aレジスタ = Aレジスタ - タイマー1の上位8ビット'],
	['SUBARG1', 160, 1, 'Aレジスタ = Aレジスタ - ARG1'],
	['SUBARG2', 161, 1, 'Aレジスタ = Aレジスタ - ARG2'],
	['CMPIX', 162, 1, 'AレジスタとIXレジスタと比較しZ（ゼロ）フラグとC（キャリー）フラグ を変化させる。'],
	['CMPIXM', 163, 1, 'AレジスタとIXMと比較しZ（ゼロ）フラグとC（キャリー）フラグ を変化させる。'],
	['CMPT1L', 164, 1, 'Aレジスタとタイマー1の下位8ビットと比較しZ（ゼロ）フラグとC（キャリー）フラグ を変化させる。'],
	['CMPT1H', 165, 1, 'Aレジスタとタイマー1の上位8ビットと比較しZ（ゼロ）フラグとC（キャリー）フラグ を変化させる。'],
	['CMPARG1', 166, 1, 'AレジスタとARG1と比較しZ（ゼロ）フラグとC（キャリー）フラグ を変化させる。'],
	['CMPARG2', 167, 1, 'AレジスタとARG2と比較しZ（ゼロ）フラグとC（キャリー）フラグ を変化させる。'],
	['ANDIXM', 168, 1, 'Aレジスタ = Aレジスタ AND IXM'],
	['ORIXM', 169, 1, 'Aレジスタ = Aレジスタ OR IXM'],
	['XORIXM', 170, 1, 'Aレジスタ = Aレジスタ XOR IXM'],
	['RLA', 171, 1, 'AレジスタをC（キャリー）フラグを通して1 ビット左に回転します。'],
	['RRA', 172, 1, 'AレジスタをC（キャリー）フラグを通して1 ビット右に回転します。'],
	['CLC', 173, 1, 'C（キャリー）フラグをクリア'],
	['STC', 174, 1, 'C（キャリー）フラグをセット'],
];

